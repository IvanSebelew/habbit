import React, { useState, useEffect } from 'react';
import $api from '../utils/axiosWithAuth';
import './HabitList.css';

const HabitList = () => {
  const [habits, setHabits] = useState([]);
  const [newHabit, setNewHabit] = useState({ 
    title: '', 
    frequency: 'daily'
  });
  const [editingHabit, setEditingHabit] = useState({ 
    id: null, 
    title: '', 
    frequency: 'daily' 
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–≤—ã—á–µ–∫
  useEffect(() => {
    fetchHabits();
  }, []);

  const fetchHabits = async () => {
    try {
      setLoading(true);
      const response = await $api.get('/habits');
      setHabits(response.data);
      setError('');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–≤—ã—á–µ–∫:', error);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏');
    } finally {
      setLoading(false);
    }
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏
  const handleAdd = async (e) => {
    e.preventDefault();
    if (!newHabit.title.trim()) return;
    
    try {
      const response = await $api.post('/habits', {
        title: newHabit.title.trim(),
        frequency: newHabit.frequency
      });
      setHabits([...habits, response.data]);
      setNewHabit({ title: '', frequency: 'daily' });
      setError('');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏:', error);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É');
    }
  };

  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏
  const handleEdit = async (e) => {
    e.preventDefault();
    if (!editingHabit.title.trim()) return;
    
    try {
      const response = await $api.put(`/habits/${editingHabit.id}`, {
        title: editingHabit.title.trim(),
        frequency: editingHabit.frequency
      });
      setHabits(habits.map(habit => 
        habit.id === editingHabit.id ? response.data : habit
      ));
      setEditingHabit({ id: null, title: '', frequency: 'daily' });
      setError('');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏:', error);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É');
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏
  const handleDelete = async (habitId) => {
    if (!window.confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –ø—Ä–∏–≤—ã—á–∫—É?')) return;
    
    try {
      await $api.delete(`/habits/${habitId}`);
      setHabits(habits.filter(habit => habit.id !== habitId));
      setError('');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏:', error);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É');
    }
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  const handleToggle = async (habitId) => {
    try {
      const response = await $api.patch(`/habits/${habitId}/toggle`);
      setHabits(habits.map(habit => 
        habit.id === habitId ? response.data : habit
      ));
      setError('');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å');
    }
  };

  // –ó–∞–ø—É—Å–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const startEditing = (habit) => {
    setEditingHabit({ 
      id: habit.id, 
      title: habit.title, 
      frequency: habit.frequency 
    });
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–µ
  const handleChange = (e) => {
    const { name, value } = e.target;
    if (editingHabit.id) {
      setEditingHabit({ ...editingHabit, [name]: value });
    } else {
      setNewHabit({ ...newHabit, [name]: value });
    }
  };

  // –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const cancelEditing = () => {
    setEditingHabit({ id: null, title: '', frequency: 'daily' });
  };

  if (loading) {
    return <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  }

  return (
    <div className="habit-list">
      <h2>–ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏</h2>

      {error && <div className="error-message">{error}</div>}

      <form onSubmit={handleAdd} className="habit-form">
        <input
          type="text"
          name="title"
          placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏"
          value={newHabit.title}
          onChange={handleChange}
          required
          maxLength={255}
        />
        <select
          name="frequency"
          value={newHabit.frequency}
          onChange={handleChange}
        >
          <option value="daily">–ï–∂–µ–¥–Ω–µ–≤–Ω–æ</option>
          <option value="weekly">–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ</option>
        </select>
        <button type="submit" className="btn-primary">–î–æ–±–∞–≤–∏—Ç—å</button>
      </form>

      {editingHabit.id && (
        <form onSubmit={handleEdit} className="habit-form editing">
          <h3>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏</h3>
          <input
            type="text"
            name="title"
            placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏"
            value={editingHabit.title}
            onChange={handleChange}
            required
            maxLength={255}
          />
          <select
            name="frequency"
            value={editingHabit.frequency}
            onChange={handleChange}
          >
            <option value="daily">–ï–∂–µ–¥–Ω–µ–≤–Ω–æ</option>
            <option value="weekly">–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ</option>
          </select>
          <div className="form-actions">
            <button type="submit" className="btn-primary">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
            <button type="button" onClick={cancelEditing} className="btn-secondary">
              –û—Ç–º–µ–Ω–∞
            </button>
          </div>
        </form>
      )}
    
      <div className="habits-container">
        {habits.length === 0 ? (
          <p className="no-habits">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é!</p>
        ) : (
          <ul className="habits-list">
            {habits.map((habit) => (
              <li key={habit.id} className={`habit-item ${habit.completed ? 'completed' : ''}`}>
                <div className="habit-info">
                  <span className="habit-title">{habit.title}</span>
                  <span className="habit-meta">
                    {habit.frequency === 'daily' ? '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ' : '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ'}
                    {habit.owner && <span className="habit-owner"> ‚Ä¢ {habit.owner}</span>}
                  </span>
                </div>
                
                <div className="habit-actions">
                  <button 
                    onClick={() => handleToggle(habit.id)} 
                    className={`toggle-btn ${habit.completed ? 'completed' : ''}`}
                  >
                    {habit.completed ? '‚úÖ' : '‚ö™'}
                  </button>
                  
                  {!habit.completed && (
                    <button 
                      onClick={() => startEditing(habit)}
                      className="btn-edit"
                      title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                    >
                      ‚úèÔ∏è
                    </button>
                  )}
                  
                  <button 
                    onClick={() => handleDelete(habit.id)}
                    className="btn-delete"
                    title="–£–¥–∞–ª–∏—Ç—å"
                  >
                    üóëÔ∏è
                  </button>
                </div>
              </li>
            ))}
          </ul>
        )}
      </div>
    </div>
  );
};

export default HabitList;